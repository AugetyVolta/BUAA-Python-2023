[{'username': '匿名用户', 'comment': '你好', 'time': '2023-07-21 20:38:39', 'reply_to': '匿名用户'}, {'username': '匿名用户', 'comment': '', 'time': '2023-07-21 20:24:29', 'reply_to': None}, {'username': '匿名用户', 'comment': '', 'time': '2023-07-21 20:24:28', 'reply_to': None}, {'username': '匿名用户', 'comment': '', 'time': '2023-07-21 20:15:08', 'reply_to': None}, {'username': '匿名用户', 'comment': '', 'time': '2023-07-21 20:15:08', 'reply_to': None}, {'username': '匿名用户', 'comment': '', 'time': '2023-07-21 20:14:50', 'reply_to': None}, {'username': '匿名用户', 'comment': '你好', 'time': '2023-07-21 20:14:16', 'reply_to': '匿名用户'}, {'username': '匿名用户', 'comment': '还是不行', 'time': '2023-07-21 20:11:49', 'reply_to': '匿名用户'}, {'username': '匿名用户', 'comment': 'Dsad', 'time': '2023-07-21 18:35:30', 'reply_to': None}, {'username': '匿名用户', 'comment': '', 'time': '2023-07-21 17:37:14', 'reply_to': None}, {'username': '匿名用户', 'comment': '', 'time': '2023-07-21 17:37:11', 'reply_to': None}, {'username': '匿名用户', 'comment': '', 'time': '2023-07-21 17:37:11', 'reply_to': None}, {'username': '匿名用户', 'comment': '', 'time': '2023-07-21 17:37:09', 'reply_to': None}, {'username': '匿名用户', 'comment': '', 'time': '2023-07-21 17:37:09', 'reply_to': None}, {'username': '匿名用户', 'comment': '', 'time': '2023-07-21 17:37:09', 'reply_to': None}, {'username': '匿名用户', 'comment': '', 'time': '2023-07-21 17:35:08', 'reply_to': None}, {'username': '匿名用户', 'comment': '', 'time': '2023-07-21 17:35:08', 'reply_to': None}, {'username': '匿名用户', 'comment': '', 'time': '2023-07-21 17:35:06', 'reply_to': None}, {'username': '匿名用户', 'comment': '', 'time': '2023-07-21 17:35:06', 'reply_to': None}, {'username': '匿名用户', 'comment': '', 'time': '2023-07-21 17:32:30', 'reply_to': None}, {'username': '匿名用户', 'comment': '回复你了', 'time': '2023-07-21 16:16:21', 'reply_to': '匿名用户'}, {'username': '匿名用户', 'comment': '挺好的', 'time': '2023-07-21 14:19:52', 'reply_to': None}, {'username': '匿名用户', 'comment': '好好好', 'time': '2023-07-21 14:19:44', 'reply_to': '匿名用户'}, {'username': '匿名用户', 'comment': '您好', 'time': '2023-07-21 11:21:52', 'reply_to': None}, {'username': '匿名用户', 'comment': '', 'time': '2023-07-21 11:12:43', 'reply_to': None}, {'username': '匿名用户', 'comment': '你好', 'time': '2023-07-21 10:50:50', 'reply_to': None}, {'username': '匿名用户', 'comment': 'import os\nimport sys\nimport ast\n\nfrom PyQt5 import QtCore, QtWidgets\nfrom PyQt5.QtCore import QDateTime\nfrom PyQt5.QtGui import QPixmap\nfrom PyQt5.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QLabel, QTextEdit, QPushButton, QWidget, \\\n    QScrollArea, QHBoxLayout, QDesktopWidget\nfrom qfluentwidgets import TextEdit, CaptionLabel, StrongBodyLabel, PrimaryPushButton, PushButton, BodyLabel, \\\n    ScrollArea, ImageLabel\n\n\nclass DishDetailWindow(QMainWindow):\n    def __init__(self, dish_name, dish_type, restaurant_name, counter_name):\n        super().__init__()\n        self.dish_name = dish_name\n        self.dish_type = dish_type\n        self.restaurant_name = restaurant_name\n        self.counter_name = counter_name\n\n        if not os.path.exists("list") or os.path.getsize("list") == 0:\n            self.comments = []\n        else:\n            f = open("list", "r")\n            self.comments = ast.literal_eval(f.readline())  # 用于存储评论的列表\n        self.reply_to_user = None  # 用于存储被回复用户的信息\n\n        self.initUI()\n\n    def initUI(self):\n        self.setWindowTitle(\'菜品详情页面\')\n        self.setGeometry(100, 100, 600, 900)\n        self.center()\n\n        # 菜品详情显示区域\n        # 设置菜品图像\n        self.dish_image_lable = ImageLabel(None)\n        self.dish_image_lable.setGeometry(QtCore.QRect(190, 170, 128, 128))\n        pixmap = QPixmap("{}/../picture_set/tmp/红烧坤.jpg")\n        self.dish_image_lable.setPixmap(pixmap)\n        self.dish_image_lable.setScaledContents(True)\n        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)\n        sizePolicy.setHorizontalStretch(0)\n        sizePolicy.setVerticalStretch(0)\n        sizePolicy.setHeightForWidth(self.dish_image_lable.sizePolicy().hasHeightForWidth())\n        self.dish_image_lable.setSizePolicy(sizePolicy)\n        self.dish_image_lable.setMinimumSize(QtCore.QSize(128, 128))\n        self.dish_image_lable.setMaximumSize(QtCore.QSize(128, 128))\n        # 设置菜品详细信息\n        dish_info_label = QLabel(f\'菜名：{self.dish_name}\\n\'\n                                 f\'类型：{self.dish_type}\\n\'\n                                 f\'餐厅：{self.restaurant_name}\\n\'\n                                 f\'柜台：{self.counter_name}\')\n        dish_info_label.setStyleSheet("font-size: 24px;")\n        self.lay = QHBoxLayout()\n        self.lay.addWidget(self.dish_image_lable)\n        self.lay.addWidget(dish_info_label)\n\n        # 创建QScrollArea用于显示评论\n        self.scroll_area = ScrollArea()\n        self.scroll_area.setWidgetResizable(True)  # 设置滚动区域的小部件可以调整大小\n\n        # 创建一个QWidget用于放置评论项\n        self.comments_widget = QWidget()\n        self.comments_layout = QVBoxLayout()\n        self.comments_widget.setLayout(self.comments_layout)\n\n        # 将QWidget设置为滚动区域的小部件\n        self.scroll_area.setWidget(self.comments_widget)\n\n        # 评论区域\n        self.comment_label = BodyLabel(\'评论：\')\n        self.comment_label.setStyleSheet("font-size: 24px;")\n        self.comment_edit = TextEdit()\n        self.comment_edit.setPlaceholderText(\'在这里输入您的评论...\')\n        self.comment_edit.setStyleSheet("font-size: 20px;")\n        self.submit_button = PushButton(\'提交评论\')\n        self.submit_button.setStyleSheet("font-size: 20px;")\n        self.clear_button = PushButton(\'清空评论\')\n        self.clear_button.setStyleSheet("font-size: 20px;")\n\n        # 安排布局\n        layout = QVBoxLayout()\n        layout_for_button = QHBoxLayout()\n        layout.addLayout(self.lay)\n        layout.addWidget(self.comment_label)\n        layout.addWidget(self.comment_edit)\n        layout_for_button.addWidget(self.submit_button)\n        layout_for_button.addWidget(self.clear_button)\n        layout.addLayout(layout_for_button)\n        layout.addWidget(self.scroll_area)  # 将QScrollArea添加到布局中\n\n        central_widget = QWidget()\n        central_widget.setLayout(layout)\n        self.setCentralWidget(central_widget)\n        # 连接按钮的点击事件\n        self.submit_button.clicked.connect(self.on_submit)\n        self.clear_button.clicked.connect(self.on_clear)\n\n        # 显示暂无评论的提示\n        self.no_comment_label = QLabel(\'暂无评论\')\n        self.no_comment_label.setStyleSheet("font-size: 24px; color: gray; margin: 10px;")\n\n        # 初始时没有评论，添加暂无评论的提示\n        self.comments_layout.addWidget(self.no_comment_label)\n\n        # 如果原来有评论就更新评论\n        self.update_comments()\n\n        self.setStyleSheet("""\n                    PushButton {\n                        background-color: #4CAF50;\n                        color: white;\n                        border: none;\n                        border-radius: 5px;\n                        padding: 10px 20px;\n                        font-size: 20px;\n                    }\n\n                    PushButton:hover {\n                        background-color: #45a049;\n                        cursor: pointer;\n                    }\n\n                    TextEdit {\n                        border: 1px solid gray;\n                        padding: 5px;\n                    }\n\n                    QLabel.comment {\n                        background-color: #f0f0f0;\n                        padding: 10px;\n                        border: 1px solid #ccc;\n                        border-radius: 5px;\n                    }\n                """)\n\n    def on_submit(self):\n        # 获取用户输入的评论内容\n        username = \'匿名用户\'  # 这里可以进一步实现用户登录获取用户名\n        comment_text = self.comment_edit.toPlainText()\n\n        # 添加评论到列表\n        current_time = QDateTime.currentDateTime().toString("yyyy-MM-dd HH:mm:ss")\n        self.comments.insert(0, {\'username\': username, \'comment\': comment_text, \'time\': current_time,\n                                 \'reply_to\': self.reply_to_user})  # 将新评论插入到列表的第一个位置\n\n        # 刷新评论区域\n        self.update_comments()\n\n        # 清空输入框\n        self.comment_edit.clear()\n\n        # 重置被回复用户信息\n        self.reply_to_user = None\n        self.comment_edit.setPlaceholderText(\'在这里输入您的评论...\')\n\n    def on_clear(self):\n        # 清空输入框\n        self.comment_edit.clear()\n        # 重置被回复用户信息\n        self.reply_to_user = None\n        self.comment_edit.setPlaceholderText(\'在这里输入您的评论...\')\n\n    def reply_to_comment(self, reply_user):\n        # 设置回复框可见，并显示被回复用户的信息\n        self.reply_to_user = reply_user\n        self.comment_edit.setPlaceholderText(f\'回复 {reply_user}:\')\n        self.comment_edit.setFocus()\n\n    def update_comments(self):\n        # 清空评论区域内容\n        for i in reversed(range(self.comments_layout.count())):\n            self.comments_layout.itemAt(i).widget().setParent(None)\n\n        if not self.comments:\n            # 如果没有评论，显示暂无评论的提示\n            self.comments_layout.addWidget(self.no_comment_label)\n        else:\n            # 移除暂无评论的提示\n            self.no_comment_label.setParent(None)\n\n            # 更新评论区域内容\n            for comment in self.comments:\n                comment_text = f"{comment[\'username\']}：{comment[\'comment\']}  <font color=\'gray\'>({comment[\'time\']})</font>"\n                if comment[\'reply_to\']:\n                    comment_text = f"{comment[\'username\']} 回复 {comment[\'reply_to\']}：{comment[\'comment\']}  <font color=\'gray\'>({comment[\'time\']})</font>"\n                comment_label = QLabel(comment_text)\n                comment_label.setObjectName(\'comment\')  # 设置样式名称\n\n                # 设置评论标签的点击事件\n                comment_label.mousePressEvent = lambda event, u=comment[\'username\']: self.reply_to_comment(u)\n\n                self.comments_layout.addWidget(comment_label)\n\n        # 滚动到评论显示框的顶部\n        scroll_bar = self.scroll_area.verticalScrollBar()\n        scroll_bar.setValue(scroll_bar.minimum())\n\n    def closeEvent(self, event):\n        store_file = open("list", "w+")\n        store_file.write(str(self.comments))\n\n    def center(self):\n        qr = self.frameGeometry()\n        cp = QDesktopWidget().availableGeometry().center()\n        qr.moveCenter(cp)\n        self.move(qr.topLeft())\n\n\nif __name__ == \'__main__\':\n    app = QApplication(sys.argv)\n    # 在这里传入菜肴信息\n    window = DishDetailWindow(dish_name=\'鱼香肉丝\',\n                              dish_type=\'中餐\',\n                              restaurant_name=\'蔡廷贵餐厅\',\n                              counter_name=\'蔡廷贵台\')\n    window.show()\n    sys.exit(app.exec_())\n', 'time': '2023-07-21 10:50:26', 'reply_to': None}, {'username': '匿名用户', 'comment': '你哈得', 'time': '2023-07-21 10:29:06', 'reply_to': '匿名用户'}, {'username': '匿名用户', 'comment': '这是测试', 'time': '2023-07-21 10:09:52', 'reply_to': None}, {'username': '匿名用户', 'comment': '', 'time': '2023-07-21 10:09:10', 'reply_to': None}, {'username': '匿名用户', 'comment': '', 'time': '2023-07-21 10:07:01', 'reply_to': '匿名用户'}, {'username': '匿名用户', 'comment': '早上好', 'time': '2023-07-21 09:52:15', 'reply_to': '匿名用户'}, {'username': '匿名用户', 'comment': '好好好', 'time': '2023-07-21 02:20:52', 'reply_to': '匿名用户'}, {'username': '匿名用户', 'comment': '晚安', 'time': '2023-07-21 02:20:15', 'reply_to': '匿名用户'}, {'username': '匿名用户', 'comment': 'import os\nimport sys\nimport ast\nfrom PyQt5.QtCore import QDateTime, Qt\nfrom PyQt5.QtGui import QPixmap\nfrom PyQt5.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QLabel, QTextEdit, QPushButton, QWidget, \\\n    QScrollArea, QHBoxLayout, QDesktopWidget\nfrom qfluentwidgets import TextEdit, CaptionLabel, StrongBodyLabel, PrimaryPushButton, PushButton, BodyLabel, ScrollArea\n\n\nclass DishDetailWindow(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        if not os.path.exists("list") or os.path.getsize("list") == 0:\n            self.comments = []\n        else:\n            f = open("list", "r")\n            self.comments = ast.literal_eval(f.readline())  # 用于存储评论的列表\n        self.reply_to_user = None  # 用于存储被回复用户的信息\n\n        self.initUI()\n\n    def initUI(self):\n        self.setWindowTitle(\'菜品详情页面\')\n        self.setGeometry(100, 100, 500, 900)  # 修改窗口大小为 500x900\n        self.center()\n\n        # 菜品图片\n        dish_image_label = QLabel(self)\n        dish_image_label.setGeometry(0, 0, 500, 300)  # 设置图片位置和大小\n        pixmap = QPixmap("dish.jpg")  # 替换为你的菜品图片文件名\n        dish_image_label.setPixmap(pixmap)\n        dish_image_label.setScaledContents(True)  # 缩放图片以适应标签大小\n\n        # 食堂和窗口信息\n        canteen_label = CaptionLabel(\'食堂：A 食堂\')\n        window_label = CaptionLabel(\'窗口：窗口 1\')\n        canteen_label.setAlignment(Qt.AlignCenter)\n        window_label.setAlignment(Qt.AlignCenter)\n\n        # 菜品详情显示区域\n        self.dish_detail_label = QLabel(\'菜品名称：鱼香肉丝\\n菜品简介：这是一道经典的川菜，口味鲜美，适合大众口味。\')\n        self.dish_detail_label.setStyleSheet("font-size: 24px;")\n\n        # 创建QScrollArea用于显示评论\n        self.scroll_area = ScrollArea()\n        self.scroll_area.setWidgetResizable(True)  # 设置滚动区域的小部件可以调整大小\n\n        # 创建一个QWidget用于放置评论项\n        self.comments_widget = QWidget()\n        self.comments_layout = QVBoxLayout()\n        self.comments_widget.setLayout(self.comments_layout)\n\n        # 将QWidget设置为滚动区域的小部件\n        self.scroll_area.setWidget(self.comments_widget)\n\n        # 评论区域\n        self.comment_label = BodyLabel(\'评论：\')\n        self.comment_label.setStyleSheet("font-size: 24px;")\n        self.comment_edit = TextEdit()\n        self.comment_edit.setPlaceholderText(\'在这里输入您的评论...\')\n        self.comment_edit.setStyleSheet("font-size: 20px;")\n        self.submit_button = PushButton(\'提交评论\')\n        self.submit_button.setStyleSheet("font-size: 20px;")\n        self.clear_button = PushButton(\'清空评论\')\n        self.clear_button.setStyleSheet("font-size: 20px;")\n\n        # 安排布局\n        layout = QVBoxLayout()\n        layout_for_button = QHBoxLayout()\n        layout.addWidget(dish_image_label)  # 添加菜品图片\n        layout.addWidget(canteen_label)  # 添加食堂信息\n        layout.addWidget(window_label)  # 添加窗口信息\n        layout.addWidget(self.dish_detail_label)\n        layout.addWidget(self.comment_label)\n        layout.addWidget(self.comment_edit)\n        layout_for_button.addWidget(self.submit_button)\n        layout_for_button.addWidget(self.clear_button)\n        layout.addLayout(layout_for_button)\n        layout.addWidget(self.scroll_area)  # 将QScrollArea添加到布局中\n\n        central_widget = QWidget()\n        central_widget.setLayout(layout)\n        self.setCentralWidget(central_widget)\n        # 连接按钮的点击事件\n        self.submit_button.clicked.connect(self.on_submit)\n        self.clear_button.clicked.connect(self.on_clear)\n\n        # 显示暂无评论的提示\n        self.no_comment_label = QLabel(\'暂无评论\')\n        self.no_comment_label.setStyleSheet("font-size: 24px; color: gray; margin: 10px;")\n\n        # 初始时没有评论，添加暂无评论的提示\n        self.comments_layout.addWidget(self.no_comment_label)\n\n        # 如果原来有评论就更新评论\n        self.update_comments()', 'time': '2023-07-21 01:59:14', 'reply_to': '匿名用户'}, {'username': '匿名用户', 'comment': 'height()', 'time': '2023-07-21 01:59:10', 'reply_to': None}, {'username': '匿名用户', 'comment': 'height()', 'time': '2023-07-21 01:59:06', 'reply_to': None}, {'username': '匿名用户', 'comment': '', 'time': '2023-07-21 01:59:00', 'reply_to': None}, {'username': '匿名用户', 'comment': '', 'time': '2023-07-21 01:58:59', 'reply_to': None}, {'username': '匿名用户', 'comment': '', 'time': '2023-07-21 01:58:58', 'reply_to': None}, {'username': '匿名用户', 'comment': '', 'time': '2023-07-21 01:58:56', 'reply_to': None}, {'username': '匿名用户', 'comment': '睡了', 'time': '2023-07-21 01:47:09', 'reply_to': '匿名用户'}, {'username': '匿名用户', 'comment': '', 'time': '2023-07-21 01:47:05', 'reply_to': None}, {'username': '匿名用户', 'comment': '', 'time': '2023-07-21 01:47:04', 'reply_to': None}, {'username': '匿名用户', 'comment': '你也好', 'time': '2023-07-21 01:43:22', 'reply_to': '匿名用户'}, {'username': '匿名用户', 'comment': '你好', 'time': '2023-07-21 01:43:18', 'reply_to': None}]